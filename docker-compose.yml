version: '3'

services:


  postgres:
    image: postgres:13
    container_name: postgres
    ports:
      - "3309:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db/db-init.sql:/docker-entrypoint-initdb.d/db-init.sql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dontgotosql
      PGDATA: /data/postgres
      TZ: Europe/Warsaw
    networks:
      - postgres

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1m
      timeout: 10s
      retries: 5
    restart: unless-stopped

  pgadmin:
    container_name: pgAdmin
    image: dpage/pgadmin4
    environment:
      TZ: Europe/Warsaw
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin-data:/var/lib/pgadmin
      - ./db/servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped

  kafka-broker:
    container_name: kafka-broker
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    user: "0:0"
    hostname: kafka-broker
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_COMPRESSION_TYPE: gzip
    networks:
      - kafka-network

  zookeeper:
    container_name: kafka-zookeeper
    image: confluentinc/cp-zookeeper:${KAFKA_VERSION}
    user: "0:0"
    hostname: kafka-zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: 'kafka-zookeeper:2888:3888'
    networks:
      - kafka-network

  init-kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    entrypoint: [ '/bin/sh', '-c' ]
    depends_on:
      - zookeeper
      - kafka-broker
    command: |
      "
      # waiting for kafka will be ready
      kafka-topics --bootstrap-server kafka-broker:9092 --list

      echo -e 'Creating topic TOPIC-NAME'
      kafka-topics --bootstrap-server kafka-broker:9092 --create --if-not-exists --topic TOPIC-NAME --replication-factor 1 --partitions 3

      echo -e 'Created topics:'
      kafka-topics --bootstrap-server kafka-broker:9092 --list
      "
    networks:
      - kafka-network

volumes:
  postgres-data:
  pgadmin-data:

networks:
  postgres:
    driver: bridge
  kafka-network:
    driver: bridge